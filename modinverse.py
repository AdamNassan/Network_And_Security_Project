from math import gcd
# Function to compute modular multiplicative inverse using extended Euclidean algorithm
# Adapted from https://stackoverflow.com/questions/4798654/modular-multiplicative-inverse-function-in-python
def mod_inverse(e, phi):
    def egcd(a, b):
        if a == 0:
            return b, 0, 1
        gcd, x1, y1 = egcd(b % a, a)
        x = y1 - (b // a) * x1
        y = x1
        return gcd, x, y
    
    gcd, x, _ = egcd(e, phi)
    if gcd != 1:
        raise ValueError("Modular inverse does not exist (e and phi are not coprime)")
    return x % phi

# Example 310-digit primes (replace with actual primes from https://primes.utm.edu/curios/index.php?start=301&stop=1000)
ALICE_P = 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001329
ALICE_Q = 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002011
BOB_P = 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004321
BOB_Q = 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005169

# Compute phi for each side
ALICE_PHI = (ALICE_P - 1) * (ALICE_Q - 1)
BOB_PHI = (BOB_P - 1) * (BOB_Q - 1)

# Choose e (must be coprime with phi)
ALICE_E = 65537
BOB_E = 65537

# Compute modular inverses
ALICE_D = mod_inverse(ALICE_E, ALICE_PHI)
BOB_D = mod_inverse(BOB_E, BOB_PHI)

# Print results
print(f"ALICE_N = {ALICE_P * ALICE_Q}")
print(f"ALICE_E = {ALICE_E}")
print(f"ALICE_D = {ALICE_D}")
print(f"BOB_N = {BOB_P * BOB_Q}")
print(f"BOB_E = {BOB_E}")
print(f"BOB_D = {BOB_D}")